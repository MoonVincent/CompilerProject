%{
    #include "syntaxNode.hpp"
    #include "lex.yy.c"
    #define NO_VALUE ""
    #define NO_LINE -1
    tree syntaxTree = nullptr;
    void yyerror(char*);
%}

%union{
    struct treeNode* node;
}

%token <node> INT FLOAT ID SEMI COMMA ASSIGNOP RELOP PLUS MINUS STAR STRING
%token <node> DIV AND OR DOT NOT TYPE LP RP LB RB LC RC STRUCT RETURN IF ELSE WHILE
%type <node> Program ExtDefList ExtDef Specifier ExtDecList FunDec CompSt VarDec
%type <node> StructSpecifier OptTag DefList Tag VarList ParamDec StmtList Stmt Exp
%type <node> Dec DecList Args Def
%start Program
%right ASSIGNOP
%left AND
%left OR
%left RELOP
%left PLUS MINUS
%left STAR DIV
%right NOT
%left DOT
%left LB RB
%left LP RP

%%

      Program: ExtDefList {syntaxTree = buildTree(1, NO_LINE, false, "Program", NO_VALUE, $1);}
            ;
    
      ExtDefList: ExtDef ExtDefList {$$ = buildTree(2, NO_LINE, false, "ExtDefList", NO_VALUE, $1, $2);}
              | {$$ = nullptr;}
              ;
    
      ExtDef: Specifier ExtDecList SEMI {$$ = buildTree(3, NO_LINE, false, "ExtDef", NO_VALUE, $1, $2, $3);}
          | Specifier SEMI {$$ = buildTree(2, NO_LINE, false, "ExtDef", NO_VALUE, $1, $2);}
          | Specifier FunDec CompSt {$$ = buildTree(3, NO_LINE, false, "ExtDef", NO_VALUE, $1, $2, $3);}
          ;
    
      ExtDecList: VarDec {$$ = buildTree(1, NO_LINE, false, "ExtDecList", NO_VALUE, $1);}
              | VarDec COMMA ExtDecList {$$ = buildTree(3, NO_LINE, false, "ExtDecList", NO_VALUE, $1, $2, $3);}
              ;
    
      Specifier: TYPE {$$ = buildTree(1, NO_LINE, false, "Specifier", NO_VALUE, $1);}
             | StructSpecifier {$$ = buildTree(1, NO_LINE, false, "Specifier", NO_VALUE, $1);}
             ;
    
      StructSpecifier: STRUCT OptTag LC DefList RC {$$ = buildTree(5, NO_LINE, false, "StructSpecifier", NO_VALUE, $1, $2, $3, $4, $5);}
                   | STRUCT Tag {$$ = buildTree(2, NO_LINE, false, "StructSpecifier", NO_VALUE, $1, $2);}
                   ;
    
      OptTag: ID {$$ = buildTree(1, NO_LINE, false, "OptTag", NO_VALUE, $1);}
            | {$$ = nullptr;}
          ;
    
      Tag: ID {$$ = buildTree(1, NO_LINE, false, "Tag", NO_VALUE, $1);}
       ;

      VarDec: ID {$$ = buildTree(1, NO_LINE, false, "VarDec", NO_VALUE, $1);}
          | VarDec LB INT RB {$$ = buildTree(4, NO_LINE, false, "VarDec", NO_VALUE, $1, $2, $3, $4);}
          ;
    
      FunDec: ID LP VarList RP {$$ = buildTree(4, NO_LINE, false, "FunDec", NO_VALUE, $1, $2, $3, $4);}
          | ID LP RP {$$ = buildTree(3, NO_LINE, false, "FunDec", NO_VALUE, $1, $2, $3);}
          ;
    
      VarList: ParamDec COMMA VarList {$$ = buildTree(3, NO_LINE, false, "VarList", NO_VALUE, $1, $2, $3);}
           | ParamDec {$$ = buildTree(1, NO_LINE, false, "VarList", NO_VALUE, $1);}
           ;
    
      ParamDec: Specifier VarDec {$$ = buildTree(2, NO_LINE, false, "ParamDec", NO_VALUE, $1, $2);}
            ;

      CompSt: LC DefList StmtList RC {$$ = buildTree(4, NO_LINE, false, "CompSt", NO_VALUE, $1, $2, $3, $4);}
          ;

      StmtList: Stmt StmtList {$$ = buildTree(2, NO_LINE, false, "StmtList", NO_VALUE, $1, $2);}
  	      | {$$ = nullptr;}
  	      ;

      Stmt: Exp SEMI {$$ = buildTree(2, NO_LINE, false, "Stmt", NO_VALUE, $1, $2);}
  	  	  | CompSt {$$ = buildTree(1, NO_LINE, false, "Stmt", NO_VALUE, $1);}
  	  	  | RETURN Exp SEMI {$$ = buildTree(3, NO_LINE, false, "Stmt", NO_VALUE, $1, $2, $3);}
  	  	  | IF LP Exp RP Stmt {$$ = buildTree(5, NO_LINE, false, "Stmt", NO_VALUE, $1, $2, $3, $4, $5);}
  	  	  | IF LP Exp RP Stmt ELSE Stmt {$$ = buildTree(7, NO_LINE, false, "Stmt", NO_VALUE, $1, $2, $3, $4, $5, $6, $7);}
  	  	  | WHILE LP Exp RP Stmt {$$ = buildTree(5, NO_LINE, false, "Stmt", NO_VALUE, $1, $2, $3, $4, $5);}
  	  	  ;

      DefList: Def DefList {$$ = buildTree(2, NO_LINE, false, "DefList", NO_VALUE, $1, $2);}
          | {$$=nullptr;}
          ;

      Def: Specifier DecList SEMI {$$ = buildTree(3, NO_LINE, false, "Def", NO_VALUE, $1, $2, $3);}
          ;

      DecList: Dec {$$ = buildTree(1, NO_LINE, false, "DecList", NO_VALUE, $1);}
          | Dec COMMA DecList {$$ = buildTree(3, NO_LINE, false, "DecList", NO_VALUE, $1, $2, $3);}
          ;

      Dec: VarDec {$$ = buildTree(1, NO_LINE, false, "Dec", NO_VALUE, $1);}
          | VarDec ASSIGNOP Exp {$$ = buildTree(3, NO_LINE, false, "Dec", NO_VALUE, $1, $2, $3);}
          ;

      Exp: Exp ASSIGNOP Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            |Exp AND Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp OR Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp RELOP Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp PLUS Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp MINUS Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp STAR Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp DIV Exp {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | LP Exp RP {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | MINUS Exp {$$ = buildTree(2, NO_LINE, false, "Exp", NO_VALUE, $1, $2);}
            | NOT Exp {$$ = buildTree(2, NO_LINE, false, "Exp", NO_VALUE, $1, $2);}
            | ID LP Args RP {$$ = buildTree(4, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3, $4);}
            | ID LP RP {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | Exp LB Exp RB {$$ = buildTree(4, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3, $4);}
            | Exp DOT ID {$$ = buildTree(3, NO_LINE, false, "Exp", NO_VALUE, $1, $2, $3);}
            | ID {$$ = buildTree(1, NO_LINE, false, "Exp", NO_VALUE, $1);}
            | INT {$$ = buildTree(1, NO_LINE, false, "Exp", NO_VALUE, $1);}
            | STRING {$$ = buildTree(1, NO_LINE, false, "Exp", NO_VALUE, $1);}
            | FLOAT {$$ = buildTree(1, NO_LINE, false, "Exp", NO_VALUE, $1);}
            ;

      Args: Exp COMMA Args {$$ = buildTree(3, NO_LINE, false, "Args", NO_VALUE, $1, $2, $3);}
            | Exp {$$ = buildTree(1, NO_LINE, false, "Args", NO_VALUE, $1);}
            ;

%%

void yyerror(char* msg){
    
}
